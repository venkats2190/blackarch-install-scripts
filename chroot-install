#!/bin/bash
################################################################################
#                                                                              #
# blackarchinstall - Blackarch Install                                         #
#                                                                              #
# FILE                                                                         #
# chroot-install                                                               #
#                                                                              #
# DATE                                                                         #
# 2013-12-16                                                                   #
#                                                                              #
# DESCRIPTION                                                                  #
# Script for easy install                                                      #
#                                                                              #
# AUTHOR                                                                       #
# nrz@nullsecurity.net                                                         #
#                                                                              #
# CONTRIBUTORS                                                                 #
# pierre@pi3rrot.net                                                           #
#                                                                              #
################################################################################

# true / false
FALSE="0"
TRUE="1"

# return codes
SUCCESS="1337"
FAILURE="31337"

# verbose mode - default: quiet
VERBOSE="/dev/null"

# colors
WHITE="$(tput bold ; tput setaf 7)"
GREEN="$(tput setaf 2)"
RED="$(tput bold; tput setaf 1)"
YELLOW="$(tput bold ; tput setaf 3)"
NC="$(tput sgr0)" # No Color

# BA REPO DEFAULT
BLACKARCH_REPO_URL='http://www.blackarch.org/blackarch/$repo/os/$arch'

# luks global variable
LUKS="false"

# printf white
wprintf() {
    fmt=$1
    shift
    printf "%s${fmt}%s\n" "${WHITE}" "$@" "${NC}"

    return "${SUCCESS}"
}

# print warning
warn()
{
    fmt=${1}
    shift
    printf "%s[!] WARNING: ${fmt}%s\n" "${RED}" "${@}" "${NC}"

    return "${SUCCESS}"
}

# print error and exit
err()
{
    fmt=${1}
    shift
    printf "%s[-] ERROR: ${fmt}%s\n" "${RED}" "${@}" "${NC}"

    return "${FAILURE}"
}

# print error and exit
cri()
{
    fmt=${1}
    shift
    printf "%s[-] CRITICAL: ${fmt}%s\n" "${RED}" "${@}" "${NC}"

    exit "${FAILURE}"
}


# usage and help
usage()
{
cat <<EOF
Usage: $0 <arg> | <misc>
OPTIONS:
    -l: Live-ISO install
    -r: repository install
    -b: blackman install
    -d: device target [/dev/sda]
MISC:
    -V: print version and exit
    -H: print help and exit
EOF
    exit "${SUCCESS}"
}

check_env()
{
    if [ -f /var/lib/pacman/db.lck ]; then
        cri "Pacman locked - rm /var/lib/pacman/db.lck"
    fi
}

# check argument count
check_argc()
{
    return "${SUCCESS}"
}

# check if required arguments were selected
check_args()
{
    return "${SUCCESS}"
}


select_ba_repo()
{
    mirror_file="/tmp/mirror.lst"
    github_url="https://github.com/BlackArch/blackarch/raw/master/mirror/mirror.lst"

    wprintf "[+] Fetching mirror list..."
    # check basic software needed
    command -v wget >/dev/null 2>&1 ||
        pacman -S wget --noconfirm
    command -v sed >/dev/null 2>&1 ||
        pacman -S sed --noconfirm
    command -v grep >/dev/null 2>&1 ||
        pacman -S grep --noconfirm

    wget -q "${github_url}" -O "${mirror_file}"
    [ "${?}" != "0" ] && cri "wget failed - setting BlackArch repository"

    wprintf "[+] Select BlackArch Repository"

    count="1"
    local IFS='|'
    ( while read -r country url mirror_name; do
        wprintf "    [%s] %s - %s" "${count}" "${country}" "${mirror_name}"
        wprintf "        * %s" "${url}"
        ((count++))
    done < "${mirror_file}" )

    printf "%sSelect mirror number: " "${WHITE}"; read a

    if [ "${a}" -gt "$(wc -l < ${mirror_file})" ]; then
        # BLACKARCH_REPO_URL gets the default one - choose better next time ;)
        wprintf "[+] you fucked up man - we select BlackArch for you..."
    else
        BLACKARCH_REPO_URL=$(sed -n "${a}p" "${mirror_file}"|cut -d"|" -f2)
        wprintf "[+] Mirror from '%s' selected" "$(sed -n "${a}p" "${mirror_file}"|cut -d"|" -f3)"
    fi

    # cleaning up
    rm -rf "${mirror_file}"

    return "${SUCCESS}"
}

update_system()
{
    wprintf "[+] Adding BlackArch Official Repo"
    select_ba_repo
    [ "${?}" == "${FAILURE}" ] &&
        wprintf "[-] Mirror selection failed - We go with default one..."

    # bug: it will ask again for mirror
    curl -s http://blackarch.org/strap.sh | sh

    if ! grep -q "blackarch" /etc/pacman.conf; then
        printf '[blackarch]\nServer = %s\n' "${BLACKARCH_REPO_URL}" >> /etc/pacman.conf
    else
        sed -i "/\[blackarch\]/{ n;s?Server.*?Server = ${BLACKARCH_REPO_URL}?; }" /etc/pacman.conf
    fi

    pacman -Syyu --noconfirm

    return "${SUCCESS}"
}

# testing
install_packages_blackman()
{
    command -v git >/dev/null 2>&1 || pacman -S git --noconfirm
    cd /usr/share/
    git clone https://github.com/nrzizrn/blackman
    ln -s /usr/share/blackman/blackman /usr/bin
    blackman -a

    return "${SUCCESS}"
}

install_packages_repo()
{
    pacman -S blackarch
    return "${SUCCESS}"
}

install_grub()
{
    pacman -S grub --noconfirm --needed

    # adding blackarch splash
    mv /boot/splash.png /boot/grub/
    printf 'GRUB_BACKGROUND="/boot/grub/splash.png"\n' >> /etc/default/grub

    grub-mkconfig -o /boot/grub/grub.cfg
    sed -i 's/Arch Linux/BlackArch Linux/' \
        /boot/grub/grub.cfg
    "${LUKS}" && sed -i "s?rw  quiet?rw cryptdevice=${ROOT_PART}:cryptboot?" \
	    /boot/grub/grub.cfg

    grub-install "${HD}"

    return "${SUCCESS}"
}

# set passwd check
set_passwd()
{
    user=${1}

    if [ -n "${user}" ]; then
        passwd "${user}"
    else
        passwd
    fi

    if [ "${?}" != "0" ]; then
        wprintf "Wrong passwd - try again d00d"
        set_passwd "${user}"
    else
        return "${SUCCESS}"
    fi

    return "${SUCCESS}"
}

configure_users()
{
    printf "%s" "${WHITE}"
    printf "[+] Setup root password\n"
    set_passwd

    mv /mnt/shell/root/.bashrc /root/
    cp /root/.bashrc /root/.bash_profile

    printf "[+] Do you want to setup a normal user account [y/N]: "; read a
    if [ "${a}" == "y" ] || [ "${a}" == "Y" ]; then
        printf "[+] User name: "; read user
        useradd -m -p "" -g users \
            -G "adm,audio,floppy,log,network,rfkill,scanner,storage,optical,power,wheel" \
            -s /bin/bash "${user}" && printf "[+] User '%s' created\n" "${user}"
        set_passwd "${user}"
        mv /mnt/shell/user/.bashrc "/home/${user}/"
        cp "/home/${user}/.bashrc" "/home/${user}/.bash_profile"
        chown -R "${user}:users" "/home/${user}"
    fi

    # cleaning up
    rm -rf /tmp/shell

    printf "%s" "${NC}"

    return "${SUCCESS}"
}

# not used atm
generate_initfs()
{
    sed -i 's/block filesystems/block encrypt filesystems/' /etc/mkinitcpio.conf
    mkinitcpio -k /boot/vmlinuz-linux -c /etc/mkinitcpio.conf -g /boot/initramfs-linux.img
    mkinitcpio -k /boot/vmlinuz-linux -c /etc/mkinitcpio.conf -g /boot/initramfs-linux-falback.img -S autodetect
    #mkinitcpio -c /etc/mkinitcpio-archiso.conf -g /boot/blackarch-linux.img

    return "${SUCCESS}"
}

install()
{
    menu_opt=${1}

    wprintf "[+] Installing packages..."
    case "${menu_opt}" in
        "live")
            wprintf "[+] Updating system..."
            update_system
            ;;
        "repository")
            wprintf "[+] Updating system..."
            update_system
            install_packages_repo
            ;;
        "blackman")
            install_packages_blackman
            ;;
    esac

    wprintf "[+] Configure system users..."
    configure_users

    if [ -z "${CHROOT_INSTALL}" ]; then
        "${LUKS}" && wprintf "[+] Re-Generating initfs..."
        "${LUKS}" && generate_initfs

        wprintf "[+] Setting blackarch hostname..."
        hostname blackarch

        wprintf "[+] Installing grub..."
        install_grub
    fi

    # sync hd
    sync

    printf "%s[+] BlackArch Linux ready! Enjoy!%s\n" "${RED}" "${NC}"


    return "${SUCCESS}"
}

# parse command line options
get_opts()
{
    while getopts lrbcD:R:LvVH flags
    do
        case "${flags}" in
            l)
                opt_arg="live"
                ;;
            r)
                opt_arg="repository"
                ;;
            b)
                opt_arg="blackman"
                ;;
            c)
                CHROOT_INSTALL=1
                ;;
            D)
                HD=${OPTARG}
                ;;
            R)
                ROOT_PART=${OPTARG}
                ;;
            L)
                LUKS="true"
                ;;
            v)
                VERBOSE="/dev/stdout"
                ;;
            V)
                printf "%s\n" "${VERSION}"
                exit "${SUCCESS}"
                ;;
            H)
                usage
                ;;
            *)
                err "WTF?! mount /dev/brain"
                ;;
        esac
    done

    return "${SUCCESS}"
}


# controller and program flow
main()
{
    check_argc ${*}
    get_opts ${*}
    check_args ${*}
    check_env

    install "${opt_arg}"

    return "${SUCCESS}"
}


# program start
main ${*}

# EOF
