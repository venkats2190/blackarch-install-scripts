#!/bin/bash
################################################################################
#                                                                              #
# blackarchinstall - Blackarch Install                                         #
#                                                                              #
# FILE                                                                         #
# chroot-install                                                               #
#                                                                              #
# DATE                                                                         #
# 2013-12-16                                                                   #
#                                                                              #
# DESCRIPTION                                                                  #
# Script for easy install                                                      #
#                                                                              #
# AUTHOR                                                                       #
# nrz@nullsecurity.net                                                         #
#                                                                              #
# CONTRIBUTORS                                                                 #
# pierre@pi3rrot.net                                                           #
# noptrix@nullsecurity.net                                                     #
#                                                                              #
################################################################################


# true / false
FALSE="0"
TRUE="1"

# return codes
SUCCESS=1337
FAILURE=31337

# verbose mode - default: quiet
VERBOSE="/dev/null"

# blackarch-install version
VERSION="v0.8.2"

# colors
WHITE="$(tput setaf 7)"
WHITEB="$(tput bold ; tput setaf 7)"
GREEN="$(tput setaf 2)"
GREENB="$(tput bold ; tput setaf 2)"
RED="$(tput setaf 1)"
REDB="$(tput bold; tput setaf 1)"
YELLOW="$(tput setaf 3)"
YELLOWB="$(tput bold ; tput setaf 3)"
NC="$(tput sgr0)" # No Color

# BA REPO DEFAULT
BLACKARCH_REPO_URL='http://www.blackarch.org/blackarch/$repo/os/$arch'

# luks global variable
LUKS="false"

BLACKARCH_WM="false"


# printf white
wprintf()
{
    fmt="${1}"

    shift
    printf "%s${fmt}%s\n" "${WHITE}" "$@" "${NC}"

    return "${SUCCESS}"
}


# print warning
warn()
{
    fmt="${1}"

    shift
    printf "%s[!] WARNING: ${fmt}%s\n" "${YELLOW}" "${@}" "${NC}"

    return "${SUCCESS}"
}


# print error and exit
err()
{
    fmt="${1}"

    shift
    printf "%s[-] ERROR: ${fmt}%s\n" "${RED}" "${@}" "${NC}"

    return "${FAILURE}"
}


# print error and exit
cri()
{
    fmt=${1}
    shift
    printf "%s[-] CRITICAL: ${fmt}%s\n" "${REDB}" "${@}" "${NC}"

    exit "${FAILURE}"
}


# leet banner, very important
banner()
{
    columns="$(tput cols)"
    _str="--==[ blackarch-install ${VERSION} ]==--"
    echo "${_str}"|while IFS= read -r line; do
        printf "%s%*s\n%s" \
            "${WHITEB}" $(( (${#line} + columns) / 2)) \
            "$line" "${NC}"
    done

    return "${SUCCESS}"
}


# print banner + head
header()
{
    head="${@}"

    clear
    printf "${REDB}%*s${NC}\n" "${COLUMNS:-$(tput cols)}" | tr ' ' '-'
    banner
    printf "${REDB}%*s${NC}\n\n\n" "${COLUMNS:-$(tput cols)}" | tr ' ' '-'
    printf "${GREEN}>> %s${NC}\n\n\n" "${head}"

    return "${SUCCESS}"
}


# usage and help
usage()
{
    cat << EOF
usage: $0 <arg> | <misc>
OPTIONS:
    -r: repository install
    -b: blackman install
    -D <hd>: device target [/dev/sda]
    -R <hd>: root partition [/dev/sda2]
    -L: luks flag
    -k <keymap>: keymap
MISC:
    -V: print version and exit
    -H: print help and exit
EOF

    exit "${SUCCESS}"
}


# check environment
check_env()
{
    if [ -f /var/lib/pacman/db.lck ]; then
        cri "pacman locked - rm /var/lib/pacman/db.lck"
    fi
}


# select blackarch repository
select_ba_repo()
{
    mirror_file="/tmp/mirror.lst"
    github_url="https://github.com/BlackArch/blackarch/raw/master/mirror/mirror.lst"

    wprintf "[+] fetching mirror list"
    # check basic software needed
    command -v wget >/dev/null 2>&1 ||
        pacman -S wget --noconfirm &>/dev/null
    command -v sed >/dev/null 2>&1 ||
        pacman -S sed --noconfirm &>/dev/null
    command -v grep >/dev/null 2>&1 ||
        pacman -S grep --noconfirm &>/dev/null

    wget -q "${github_url}" -O "${mirror_file}"
    [ "${?}" != "0" ] && cri "wget failed - setting BlackArch repository"

    count="1"
    local IFS='|'
    ( while read -r country url mirror_name; do
        wprintf "   %s. %s - %s" "${count}" "${country}" "${mirror_name}"
        wprintf "       * %s" "${url}"
        ((count++))
    done < "${mirror_file}" )

    printf "%s[?] select mirror number: " "${WHITE}"; read a

    # bugfix: detected chars added sometimes - clear chars
    _a=$(printf "%s" "${a}"|sed 's/[a-z]//Ig')

    if [ "${_a}" -le "$(wc -l < ${mirror_file})" ]; then
        BLACKARCH_REPO_URL=$(sed -n "${_a}p" "${mirror_file}"|cut -d"|" -f2)
        wprintf "   -> mirror from '%s' selected" \
            "$(sed -n "${_a}p" "${mirror_file}"|cut -d"|" -f3)"
    else
       # BLACKARCH_REPO_URL gets the default one - choose better next time ;)
        wprintf "[+] you fucked up man - we select BlackArch for you..."
    fi

    # cleaning up
    rm -rf "${mirror_file}"

    return "${SUCCESS}"
}


# update the system
update_system()
{
    header "Adding BlackArch Linux repository"

    select_ba_repo
    if [ "${?}" = "${FAILURE}" ]; then
        warn "mirror selection failed - we go with default one"
    fi

    sed -i 's|#Color|Color|' /etc/pacman.conf

    if [ "`uname -m`" = "x86_64" ]; then
        wprintf "[+] enabling multilib in /etc/pacman.conf"
        echo
        if grep -q "#\[multilib\]" /etc/pacman.conf
        then
            # it exist but commented
            sed -i '/\[multilib\]/{ s/^#//; n; s/^#//; }' /etc/pacman.conf
        elif ! grep -q "\[multilib\]" /etc/pacman.conf
        then
            # it does not exist at all
            printf "[multilib]\nInclude = /etc/pacman.d/mirrorlist\n" \
                >> /etc/pacman.conf
        fi
    fi

    if ! grep -q "blackarch" /etc/pacman.conf; then
        printf '[blackarch]\nServer = %s\n' "${BLACKARCH_REPO_URL}" \
            >> /etc/pacman.conf
    else
        sed -i "/\[blackarch\]/{ n;s?Server.*?Server = ${BLACKARCH_REPO_URL}?; }" /etc/pacman.conf
    fi

    # keep white style with strap.sh
    printf "%s" "${WHITE}"
    command -v wget >/dev/null 2>&1 ||
        pacman -S wget --noconfirm &>/dev/null
    wget -O /tmp/strap.sh http://blackarch.org/strap.sh
    sha1strap=$(sha1sum /tmp/strap.sh|awk '{print $1}')
    if [ "${sha1strap}" == "f8456229463718c097cf70ed06a806f981be7423" ]; then
        bash /tmp/strap.sh
    else
        warn "wrong sha1sum for strap.sh: ${sha1strap}"
        cri "Aborting"
    fi

    #clean up
    rm -rf /tmp/strap.sh

    printf "%s" "${NC}"

    #debug - under dev
    #exit
    #curl -s -O \
    #     'http://blackarch.org/keyring/blackarch-keyring.pkg.tar.xz{,.sig}'

    #gpg \
    #    --keyserver hkp://pgp.mit.edu \
    #    --recv-keys 4345771566D76038C7FEB43863EC0ADBEA87E4E3 > /dev/null 2>&1
    #if ! gpg \
    #    --keyserver-options no-auto-key-retrieve \
    #    --with-fingerprint blackarch-keyring.pkg.tar.xz.sig > /dev/null 2>&1
    #then
    #    cri 'invalid keyring signature. please stop by irc.freenode.net/blackarch'
    #fi
    #pacman-key --init
    #if ! pacman --config /dev/null \
    #     --noconfirm -U blackarch-keyring.pkg.tar.xz
    #then
    #    err 'keyring installation failed'
    #fi

    #rm -rf blackarch-keyring.*
    #exit

    pacman -Syyu --noconfirm

    return "${SUCCESS}"
}


# testing
install_packages_blackman()
{
    command -v git >/dev/null 2>&1 || pacman -S git --noconfirm

    cd /usr/share/
    git clone https://github.com/nrzizrn/blackman
    ln -s /usr/share/blackman/blackman /usr/bin
    blackman -a

    return "${SUCCESS}"
}


# install blackarch packages
install_packages_repo()
{
    header "BlackArch Linux packages installation"

    printf "%s" "${WHITE}"

    if confirm "[?] Install BlackArch Linux Tools now (grab a coffee) [y/n]: "; then
        pacman -S blackarch
    fi

    header "BlackArch Linux WM installation"

    printf "%s" "${WHITE}"
    # X11 related, wms, configs
    if [ -z "${CHROOT_INSTALL}" ]; then
        if confirm "[?] Install BlackArch Linux WMs (lxdm + [fluxbox, awesome, etc.]) [y/n]: "; then
            BLACKARCH_WM=true
            # xorg
            pacman -S xorg-server xorg-xinit xorg-server-utils --noconfirm
            # xf86*
            pacman -S xf86-video-ark xf86-video-ast xf86-video-ati xf86-video-chips \
            xf86-video-cirrus xf86-video-dummy xf86-video-fbdev xf86-video-glint \
            xf86-video-i128 xf86-video-i740 xf86-video-intel xf86-video-mach64 \
            xf86-video-mga xf86-video-modesetting xf86-video-neomagic xf86-video-nouveau \
            xf86-video-nv xf86-video-openchrome xf86-video-r128 xf86-video-rendition \
            xf86-video-s3 xf86-video-s3virge xf86-video-savage xf86-video-siliconmotion \
            xf86-video-sis xf86-video-sisimedia xf86-video-sisusb xf86-input-synaptics \
            xf86-video-tdfx xf86-video-trident xf86-video-tseng xf86-video-v4l \
            xf86-video-vesa xf86-video-vmware xf86-video-voodoo \
            xf86-input-synaptics xorg-fonts-100dpi xorg-fonts-75dpi \
            ttf-liberation ttf-dejavu ttf-freefont font-bh-tt xorg-fonts-type1 \
            xorg-font-utils xorg-fonts-alias xorg-fonts-misc xorg-mkfontscale \
            xorg-mkfontdir ttf-indic-otf --noconfirm
            # install lxdm
            pacman -S lxdm --noconfirm --force
            # term
            pacman -S xterm --noconfirm
            # blackarch WM
            pacman -S blackarch-config-awesome blackarch-config-fluxbox \
            blackarch-config-lxdm blackarch-config-openbox \
            blackarch-config-wmii blackarch-config-spectrwm fluxbox openbox \
            awesome spectrwm blackarch-dwm i3-wm wmii blackarch-config-gtk \
            --noconfirm --force
            # misc packages
            pacman -S firefox opera wicd-gtk wicd --noconfirm --force
       fi
    fi

    printf "%s" "${NC}"

    return "${SUCCESS}"
}


# install grub bootloader
install_grub()
{
    header "Bootloader installation"

    printf "%s" "${WHITE}"

    if confirm "[?] install grub [y/n]: "; then
        pacman -S grub --noconfirm --needed

        mv /tmp/splash.png /boot/grub/
        printf 'GRUB_BACKGROUND="/boot/grub/splash.png"\n' >> /etc/default/grub
        if [ "${LUKS}" == "true" ]; then
            sed -i "s|quiet|cryptdevice=${ROOT_PART}:cryptroot root=/dev/mapper/cryptroot|" /etc/default/grub
            sed -i 's|"Arch"|"BlackArch"|' /etc/default/grub
            #sed -i "s|rw  quiet|rw cryptdevice=${ROOT_PART}:cryptroot|" \
            #  /boot/grub/grub.cfg
        fi
        # install/update grub config
        grub-mkconfig -o /boot/grub/grub.cfg
        grub-install --target=i386-pc "${HD}"
        sed -i 's/Arch Linux/BlackArch Linux/' /boot/grub/grub.cfg
    fi

    printf "%s" "${NC}"

    return "${SUCCESS}"
}


# set passwd check
set_passwd()
{
    user="${1}"

    if [ -n "${user}" ]; then
        passwd "${user}"
    else
        passwd
    fi

    if [ "${?}" != "0" ]; then
        wprintf "wrong passwd - please try again"
        set_passwd "${user}"
    else
        return "${SUCCESS}"
    fi

    return "${SUCCESS}"
}

configure_vbox()
{
    header "VirtualBox configuration"

    printf "%s" "${WHITE}"

    if confirm "[?] Install VirtualBox packages [y/n]: "; then
        echo
        pacman -S virtualbox-guest-utils \
                  virtualbox-guest-modules  --noconfirm
        printf "vboxguest\nvboxsf\nvboxvideo" \
            >> /etc/modules-load.d/virtualbox.conf
        groupadd vboxsf
        systemctl enable vboxservice
        systemctl start vboxservice
    fi

    printf "%s" "${NC}"

    return "${SUCCESS}"
}

# add and configure users
configure_users()
{
    header "User configuration"

    printf "%s" "${WHITE}"

    printf "[+] setting up root password\n"
    echo
    set_passwd

    mv /tmp/shell/root/.bash* /root/
    mv /tmp/shell/root/.Xresources /root/

    echo
    if confirm "[?] setup a normal user account [y/n]: "; then
        printf "[?] user name: "; read user
        useradd -m -p "" -g users \
            -G "adm,audio,floppy,log,network,rfkill,scanner,storage,optical,power,wheel" \
            -s /bin/bash "${user}" && printf "[+] user '%s' created\n" "${user}"
        set_passwd "${user}"
        mv /tmp/shell/user/.bash* "/home/${user}/"
        mv /tmp/shell/user/.Xresources "/home/${user}/"
        chown -R "${user}:users" "/home/${user}"
    fi

    # cleaning up
    rm -rf /tmp/shell

    printf "%s" "${NC}"

    return "${SUCCESS}"
}


# not used atm
generate_initramfs()
{
    header "Creating initramfs"

    sed -i 's/block filesystems/block keymap encrypt filesystems/' /etc/mkinitcpio.conf

    mkinitcpio -p linux

    return "${SUCCESS}"
}


# set system hostname
set_hostname()
{
    header "Hostname setup"

    printf "%s" "${WHITE}"

    printf "[?] set hostname [blackarch]: "
    read hostname

    if [ "${hostname}" == "" ]; then
        hostname="blackarch"
    fi

    printf "%s\n" "${hostname}" > /etc/hostname

    printf "%s" "${NC}"

    return "${SUCCESS}"
}

configure_ba_wm()
{
    # configure lxdm
    rm -rf /etc/lxdm /usr/share/lxdm
    mv /etc/lxdm-blackarch /etc/lxdm
    mv /usr/share/lxdm-blackarch /usr/share/lxdm
    mv /usr/share/xsessions-blackarch /usr/share/xsessions
    rm -rf /usr/share/gtk-2.0
    mv /usr/share/gtk-blackarch /usr/share/gtk-2.0
    rm -rf /usr/share/xsessions/openbox-kde.desktop
    rm -rf /usr/share/xsessions/i3-with-shmlog.desktop
    systemctl enable lxdm

    # configure fluxbox
    rm -rf /usr/share/fluxbox
    mv /usr/share/fluxbox-blackarch /usr/share/fluxbox

    # configure openbox
    rm -rf /etc/xdg/openbox
    mv /etc/xdg/openbox-blackarch /etc/xdg/openbox
    mv /usr/share/themes/blackarch/openbox-3-blackarch \
       /usr/share/themes/blackarch/openbox-3

    # configure awesome
    rm -rf /etc/xdg/awesome/rc.lua
    mv /etc/xdg/awesome/rc.lua.blackarch /etc/xdg/awesome/rc.lua

    # configure spectrwm
    rm -rf /etc/spectrwm.conf
    cp /usr/share/spectrwm-blackarch/spectrwm.conf /etc/spectrwm.conf
    mv /usr/share/spectrwm-blackarch/spectrwm.conf /root/.spectrwm.conf

    return "${SUCCESS}"
}


# install the system
install()
{
    menu_opt=${1}

    header "Package installation"

    case "${menu_opt}" in
        "repository")
            header "System update"
            update_system
            install_packages_repo
            ;;
        "blackman")
            install_packages_blackman
            ;;
    esac

    [ -z "${CHROOT_INSTALL}" ] && configure_vbox

    configure_users

    if [ -z "${CHROOT_INSTALL}" ]; then
        "${LUKS}" && generate_initramfs

        set_hostname

        # set keymaps choosed before silently
        printf "KEYMAP=%s\n" "${KEYMAPS}" > /etc/vconsole.conf

        install_grub
    fi

    "${BLACKARCH_WM}" && configure_ba_wm

    # sync hd
    sync

    header "Installation successfull!"
    printf "%s[+] Your BlackArch Linux is ready, enjoy!%s\n\n\n" "${WHITEB}" "${NC}"

    return "${SUCCESS}"
}


# parse command line options
get_opts()
{
    while getopts rbcD:R:LvVH flags
    do
        case "${flags}" in
            r)
                opt_arg="repository"
                ;;
            b)
                opt_arg="blackman"
                ;;
            c)
                CHROOT_INSTALL=1
                ;;
            D)
                HD=${OPTARG}
                ;;
            R)
                ROOT_PART=${OPTARG}
                ;;
            L)
                LUKS="true"
                ;;
            k)
                KEYMAPS=${OPTARG}
                ;;
            v)
                VERBOSE="/dev/stdout"
                ;;
            V)
                printf "%s\n" "${VERSION}"
                exit "${SUCCESS}"
                ;;
            H)
                usage
                ;;
            *)
                err "WTF?! mount /dev/brain"
                ;;
        esac
    done

    return "${SUCCESS}"
}

#confirm user inputted yYnN.
confirm()
{
    local r
      until [[ $r = [YyNn] ]]; do
      read -p "$1" r
      printf "%s" "${RED}"
      done
     printf "%s" "${WHITE}"
     [[ $r == [Yy] ]]
}

# controller and program flow
main()
{
    get_opts ${@}
    check_env
    install "${opt_arg}"

    return "${SUCCESS}"
}


# program start
main ${@}

# EOF
