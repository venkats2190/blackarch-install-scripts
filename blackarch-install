#!/bin/bash
################################################################################
#                                                                              #
# blackarch-install - Installer script for BlackArch Linux                     #
#                                                                              #
# FILE                                                                         #
# blackarch-install                                                            #
#                                                                              #
# DATE                                                                         #
# 2013-12-16                                                                   #
#                                                                              #
# DESCRIPTION                                                                  #
# Script for easy installation of BlackArch Linux                              #
#                                                                              #
# AUTHOR                                                                       #
# nrz@nullsecurity.net                                                         #
#                                                                              #
# CONTRIBUTORS                                                                 #
# pierre@pi3rrot.net                                                           #
# noptrix@nullsecurity.net                                                     #
#                                                                              #
################################################################################


# SECURITY VAR - for beta version that can rm -rf /* your hard drive
SEC_ENABLE="false"

# root variable
ROOT="/mnt/blackarch"

# Partition CONST
PART_AUTO="1"
PART_MANUAL="2"

# Menu where CONST
MENU_DRIVE="1"
MENU_CHROOT="2"

# Menu How CONST
MENU_LIVE="1"
MENU_REPO="2"
MENU_BLACKMAN="3"

# Set up defaults partitioning vars
boot_type="ext2"
boot_size="500MB"
swap_size="1024MB"
root_type="ext4"
root_size="10GB"

# luks global var
LUKS="false"

# swap global var
SWAP="false"

# blackarch-install version
VERSION="v0.8 - testing"

# return codes
SUCCESS=1337
FAILURE=31337

# verbose mode - default: quiet
VERBOSE="/dev/null"

# colors
WHITE="$(tput bold ; tput setaf 7)"
GREEN="$(tput setaf 2)"
RED="$(tput bold; tput setaf 1)"
YELLOW="$(tput bold ; tput setaf 3)"
NC="$(tput sgr0)" # No Color


# print formatted output
wprintf()
{
    fmt="${1}"

    shift
    printf "%s${fmt}%s\n" "${WHITE}" "$@" "${NC}"

    return "${SUCCESS}"
}


# print warning
warn()
{
    fmt="${1}"

    shift
    printf "%s[!] WARNING: ${fmt}%s\n" "${RED}" "${@}" "${NC}"

    return "${SUCCESS}"
}


# print error and exit
err()
{
    fmt="${1}"

    shift
    printf "%s[-] ERROR: ${fmt}%s\n" "${RED}" "${@}" "${NC}"

    return "${FAILURE}"
}


# print critical error and exit
cri()
{
    fmt="${1}"

    shift
    printf "%s[x] CRITICAL: ${fmt}%s\n" "${RED}" "${@}" "${NC}"

    exit "${FAILURE}"
}


# print banner + head
header()
{
    head="${@}"

    clear
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
    banner
    printf '%*s\n\n\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
    wprintf ">> %s\n\n" "${head}"

    return "${SUCCESS}"
}


# usage and help
usage()
{
    cat << EOF
Usage: $0 <arg> | <misc>
MISC:
    -V: print version and exit
    -H: print help and exit
EOF

    return "${SUCCESS}"
}


# leet banner, very important
banner()
{
    printf "%s--==[ blackarch-install %s ]==--%s\n" \
        "${YELLOW}" "${VERSION}" "${NC}"

    return "${SUCCESS}"
}


# check for environment issues
check_env()
{
    if [ -f /var/lib/pacman/db.lck ]; then
        cri "pacman locked - rm /var/lib/pacman/db.lck"
    fi
}


# update the system
update_system()
{
    if [ "`uname -m`" = "x86_64" ]; then
        wprintf "[*] enabling multilib in /etc/pacman.conf"
        if grep -q "#\[multilib\]" /etc/pacman.conf
        then
            # it exist but commented
            sed -i '/\[multilib\]/{ s/^#//; n; s/^#//; }' /etc/pacman.conf
        elif ! grep -q "\[multilib\]" /etc/pacman.conf
        then
            # it does not exist at all
            printf "[multilib]\nInclude = /etc/pacman.d/mirrorlist\n" \
                >> /etc/pacman.conf
        fi
    fi

    pacman -Syy --noconfirm "${LIVE+-u}"

    return "${SUCCESS}"
}


# set keymaps
set_keymaps()
{
    printf "%s" "${WHITE}"

    #printf "[*] running locale-gen, please wait...\n"
    #locale-gen &> /dev/null

    while true; do
        printf "[*] keymap options:\n"
        printf "    1. set a keymap\n"
        printf "    2. list available keymaps\n"
        printf "[?] select option: "

        read keymaps_opt

        if [ "${keymaps_opt}" = "1" ]; then
            break
        fi

        if [ "${keymaps_opt}" = "2" ]; then
            printf "%s" "${NC}"
            localectl list-keymaps
            clear
            printf "%s" "${WHITE}"
        fi
    done

    printf "[?] set keymap [us]: "
    read keymaps

    # default keymap
    if [ "${keymaps}" == "" ]; then
        keymaps="us"
    fi

    localectl set-keymap --no-convert "${keymaps}"
    loadkeys "${keymaps}"

    printf "%s" "${NC}"

    return "${SUCCESS}"
}


# check parted status
check_parted_status()
{
    if [ "${?}" != "0" ]; then
        cri "something went wrong with parted - if you plan to run install script again, delete first all partitions created before error."
    fi

    return "${SUCCESS}"
}


# check mkfs status
check_mkfs_status()
{
    if [ "${?}" != "0" ]; then
        cri "something went wrong with mkfs"
    fi

    return "${SUCCESS}"
}


# run cfdisk and let the user play
run_cfdisk()
{
    default_part="1"

    wprintf "[*] create new partitions with cfdisk %s(root, optional: boot and swap)" "${RED}"
    sleep 3
    cfdisk "${HD}"

    if [ "${?}" != "0" ]; then
        cri "error with cfdisk - run install again"
    fi

    return "${SUCCESS}"
}


# get selected partitions
get_partitions()
{
    # * BOOT

    if confirm "%s[?] created a boot partition [y/N]: " "${WHITE}"; then
        if [ "${LUKS}" == "true" ]; then
            warn "using luks encryption without boot partition will fail"
        fi
    fi

    if confirm; then
        BOOT="true"
        printf "%s[?] boot partition number [%s]: " "${WHITE}" "${default_part}"
        read a
        if [ "${a}" != "" ]; then
            boot_part="${HD}${a}"
        else
            boot_part="${HD}${default_part}"
        fi

        printf "[?] fs type of boot partition [ext2]: "
        read a
        if [ "${a}" != "" ]; then
            boot_type="${a}"
        fi

        ((default_part++))
    fi


    a=""

    # * SWAP
    if confirm "%s[?] created a swap partition [y/N]: " "${WHITE}"; then
        SWAP="true"
        printf "\n [?] swap partition number [%s]:" "${default_part}"; read a
        if [ "${a}" != "" ]; then
            swap_part="${HD}${a}"
        else
            swap_part="${HD}${default_part}"
        fi

        ((default_part++))
    fi

    # * ROOT
    printf "%s[?] root partition number [%s]: " "${WHITE}" "${default_part}"
    read a
    if [ "${a}" != "" ]; then
        root_part="${HD}${a}"
    else
        root_part="${HD}${default_part}"
    fi

    printf "%s[?] fs type of root partition [ext4]: " "${WHITE}"
    read a
    if [ "${a}" != "" ]; then
        root_type="${a}"
    fi

    return "${SUCCESS}"
}


# format partitions
format_partition()
{
    warn "formatting partitions"

    if [ "${BOOT}" == "true" ]; then
        wprintf "%s   -> boot %s with type %s" "${WHITE}" "${boot_part}" "${boot_type}"
    fi

    if [ "${SWAP}" == "true" ]; then
        wprintf "%s   -> swap %s with type swap" "${WHITE}" "${swap_part}"
    fi

    wprintf "   -> / %s with type %s" "${root_part}" "${root_type}"

    printf "%s[?] are you sure [y/N]: " "${WHITE}";
    # safety checks
    if [ "${BOOT}" == "true" ]; then
      umount "${boot_part}" &> /dev/null
    fi

    umount "${root_part}" &> /dev/null

    if confirm; then
        # * BOOT
        if [ "${BOOT}" == "true" ]; then
            "mkfs.${boot_type}" -L boot "${boot_part}"
            check_mkfs_status
        fi

        # * ROOT
        if [ "${LUKS}" = "true" ]; then
            # format and encrypt root partition
            printf "[*] formatting root partiton"
            cryptsetup -y -v luksFormat "${root_part}"
            printf "[*] opening encrypted partition\n"
            cryptsetup open "${root_part}" cryptroot
            "mkfs.${root_type}" -L root "/dev/mapper/cryptroot"
            check_mkfs_status
            printf "[*] created encrypted root partition:"
            printf "    -> /dev/mapper/cryptroot - ext4\n"
        else
            "mkfs.${root_type}" -L root "${root_part}"; check_mkfs_status
            printf "[*] created root partition:"
            printf "    -> %s - ext4\n" "${root_part}"
        fi

        # * SWAP
        if [ "${SWAP}" == "true" ]; then
            mkswap "${swap_part}"
            check_mkfs_status
        fi
    else
        cri "no format no fun. aborting!"
    fi

    printf "%s" "${NC}"

    return "${SUCCESS}"
}


# ask for luks + encryption
ask_for_luks()
{
    printf "%s" "${WHITE}"

    if confirm "[?] full encrypted root [y/N]: "; then
        LUKS="true"
	    warn "root will be encrypted"
    else
	    warn "root will NOT be encrypted"
    fi

}


# setup a filesystem
setup_filesystem()
{
    printf "%s" "${WHITE}"

    # force user to set device to format
    unset a
    while [ -z "${a}" ]; do
        printf "[?] device for installation [/dev/sdX]: " "${HD}"; read a;
        if [ "${a}" != "" ]
        then
            HD=${a} # sanitize input
            break
        fi
    done

    printf "[*] hard drive selected: %s\n" "${HD}"

    printf "%s" "${NC}"

    return "${SUCCESS}"
}


# mount filesystems
mount_filesystem()
{
    mkdir -p "${ROOT}"

    if [ "${LUKS}" == "true" ]; then
        # TODO: make /dev/mapper/cryptroot variable for later chroot -R
	    mount -t "${root_type}" /dev/mapper/cryptroot "${ROOT}"
    else
	    mount -t "${root_type}" "${root_part}" "${ROOT}"
    fi

    mkdir -p "${ROOT}/boot"

    if [ "${BOOT}" == "true" ]; then
        mount -t "${boot_type}" "${boot_part}" "${ROOT}/boot"
    fi

    if [ "${SWAP}" == "true" ]; then
        swapon "${swap_part}"
    fi

    return "${SUCCESS}"
}


# install ArchLinux base packages
install_base_packages()
{
    wprintf "[*] installing ArchLinux base packages"

    pacstrap -c "${ROOT}" base

    [ "${?}" != "0" ] && cri "Failed to install ArchLinux base packages"

    return "${SUCCESS}"
}


# install chroot system
install_chroot_script()
{
    mode=${1}

    # setup chroot-install path
    if [ -f chroot-install ]; then
        chroot_file="chroot-install"
    else
        # we are a blackarch package installed
        chroot_file="/usr/share/blackarch-install-scripts/chroot-install"
    fi

    cp "${chroot_file}" "${ROOT}/bin/"
    mkdir -p ${ROOT}/{proc,sys,dev}

    mount -t proc proc "${ROOT}/proc"
    mount --rbind /dev "${ROOT}/dev"
    mount --rbind /sys "${ROOT}/sys"

    # init pacman-key for debootstrap
    if [ "${menu_opt_how}" == "${MENU_CHROOT}" ]; then
        wprintf "   - Init pacman keyring. This will take a while..."
        chroot "${ROOT}" dirmngr </dev/null
        chroot "${ROOT}" pacman-key --init
        chroot "${ROOT}" pacman-key --refresh-keys
        chroot "${ROOT}" pacman-key --populate archlinux
        chroot "${ROOT}" pacman -Syy
        chroot "${ROOT}" pacman -S
        chroot "${ROOT}" "/bin/chroot-install" "${mode}" -D "${HD}" -R "${root_part}" "$(${LUKS} && printf '%sL' '-')" -c
    else
        chroot "${ROOT}" "/bin/chroot-install" "${mode}" -D "${HD}" -R "${root_part}" "$(${LUKS} && printf '%sL' '-')"
    fi

    # cleaning up
    rm -rf "${ROOT}/bin/${chroot_file}"

    return "${SUCCESS}"

}

# only for live mode
dump_live()
{
    t=7
    remaining=7
    SECONDS=0

    while sleep .2; do
        printf '\r[*] down the rabbit hole we go '"${RED}$remaining"${NC}' '

        if (( (remaining=t-SECONDS) <=0 )); then
            printf '\rseconds remaining to proceed' 0
            break
        fi
    done

    cp -aRpv /bin /etc /home /lib /lib64 /opt /root /srv /usr /var /tmp "${ROOT}"

    # cleaning files - it will be create later
    rm -rf "${ROOT}/etc/{group, passwd, shadow*, gshadow*}"

    wprintf "[*] dump done"

    return "${SUCCESS}"
}

run_chroot_script()
{
    wprintf "[*] Installing BlackArch Linux"

    # if live not need to do this
    if [ "${menu_opt_how}" != "${MENU_LIVE}" ] &&
       [ "${menu_opt_how}" != "${MENU_CHROOT}" ]; then
        wprintf "[+] Generating pacman.conf"
        cp -Rf /etc/pacman* "${ROOT}/etc/"

        wprintf "[+] Generating resolv.conf"
        cp /etc/resolv.conf "${ROOT}/etc/"
    fi

    wprintf "[+] Installing chroot system..."
    if [ -d shell ]; then
        cp -f shell/etc/issue "${ROOT}/etc/"
        cp -R shell/ "${ROOT}/mnt/"
    else
        cp -f /usr/share/blackarch-install-scripts/shell/etc/issue "${ROOT}/etc/"
        cp -R /usr/share/blackarch-install-scripts/shell "${ROOT}/mnt/"
    fi
    # setup hostname
    sed -i 's/localhost/blackarch/g' "${ROOT}/etc/hosts"

    case "${menu_opt_how}" in
        "${MENU_LIVE}")
            install_chroot_script -l
            ;;
        "${MENU_REPO}")
            install_chroot_script -r
            ;;
        "${MENU_BLACKMAN}")
            install_chroot_script -b
            ;;
    esac
}

# install the system
install_drive()
{
    menu_opt_how="${1}"

    header "keymap configuration"
    set_keymaps

    header "system update"
    update_system

    header "hard drive configuration"
    ask_for_luks
    setup_filesystem
    run_cfdisk
    get_partitions
    format_partition
    mount_filesystem

    header "system installation"
    [ "${menu_opt_how}" = "${MENU_LIVE}" ] && dump_live

    header "package installation"
    install_base_packages

    return "${SUCCESS}"
}

download_bootstrap()
{
    bootstrap_tarball=$(curl -s https://mirrors.kernel.org/archlinux/iso/latest/|grep "bootstrap.*$(uname -m)"|head -n1|cut -d'"' -f2)

    wget "https://mirrors.kernel.org/archlinux/iso/latest/${bootstrap_tarball}"
    [ "${?}" != "0" ] && cri "Error downloading bootstrap tarball"

    return "${SUCCESS}"
}

install_chroot()
{
    find_tarball=$(find * -maxdepth 0 -name archlinux*tar.gz)

    # -pcvzf

    [ -z "${find_tarball}" ] && download_bootstrap

    wprintf "[*] Decompressing Archlinux..."
    tar -zxvf "$(find * -maxdepth 0 -name archlinux*tar.gz)" &> /dev/null
    mv "root.$(uname -m)" "${ROOT}"
    wprintf "[*] Setting up Archlinux..."
    # random server
    printf 'Server = http://mirror.nl.leaseweb.net/archlinux/$repo/os/$arch' \
            >> "${ROOT}/etc/pacman.d/mirrorlist"
    cp -f /etc/resolv.conf "${ROOT}/etc/resolv.conf"
    rm -rf "${ROOT}/README"

    # if live dump everything
    [ "${menu_opt_how}" == "${MENU_LIVE}" ] && dump_live

    return "${SUCCESS}"
}


# print installer menu and get chosen options
install_menu_how()
{
    printf "%s" "${WHITE}"

    while ! [ "${menu_opt_how}" = "${MENU_LIVE}" \
           -o "${menu_opt_how}" = "${MENU_REPO}" \
           -o "${menu_opt_how}" = "${MENU_BLACKMAN}" ]; do

        printf "[*] installation modes:\n"
        printf "    1. install from live-iso\n"
        printf "    2. install from official repository of BlackArch\n"
        printf "    3. install from sources using blackman\n"
        printf "[?] select mode: "; read menu_opt_how
    done

    printf "%s\n" "${NC}"

    return "${SUCCESS}"
}

install_menu_where()
{
    printf "%s" "${WHITE}"
    while ! [ "${menu_opt_where}" == "${MENU_DRIVE}" \
           -o "${menu_opt_where}" == "${MENU_CHROOT}" ]; do
        printf "[+] Where to install BlackArch:\n"
        printf "    1. Install into Drive.\n"
        printf "    2. Install into chroot from existing linux.\n"
        printf "Make a choice: "; read menu_opt_where
    done

    if [ "${menu_opt_where}" == "${MENU_CHROOT}" ]; then
        printf "[?] Directory to make chroot [%s]: " "${ROOT}"
        read a; [ "${a}" != "" ] && ROOT="${a}"
    fi

    printf "%s" "${NC}"

    return "${SUCCESS}"
}

# parse command line options
get_opts()
{
    while getopts vVH flags
    do
        case "${flags}" in
            v)
                VERBOSE="/dev/stdout"
                ;;
            V)
                printf "%s\n" "${VERSION}"
                exit "${SUCCESS}"
                ;;
            H)
                usage
                ;;
            *)
                err "WTF?! mount /dev/brain"
                ;;
        esac
    done

    return "${SUCCESS}"
}

#confirm user inputted yYnN.
confirm()
{
    local r
      until [[ $r = [YyNn] ]]; do
      read -p "$1" r
      done
      [[ $r == [Yy] ]]
}

# controller and program flow
main()
{
    header "Welcome to BlackArch Linux Installation"
    get_opts "${@}"
    check_env

    if [ "${SEC_ENABLE}" = "false" ]; then
        clear
        install_menu_where
        install_menu_how
        if [ "${menu_opt_where}" == "${MENU_DRIVE}" ]; then
            install_drive
        else
            install_chroot
        fi
        run_chroot_script
     else
        cri "\$SEC_ENABLE active - vim blackarch-install"
    fi

    return "${SUCCESS}"
}


# program start
main "${@}"


# EOF
